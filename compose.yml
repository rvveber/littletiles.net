services:
  database:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    volumes:
      - database_data:/var/lib/postgresql/data
    networks:
      - app_network
    restart: unless-stopped
    env_file:
      - .env

  backend:
    image: directus/directus:11.8
    ports:
      - "8055:8055"
    volumes:
      # TODO: set up minio bucket
      - backend_uploads:/directus/uploads
      - ./backend/schemas:/directus/schemas
      - ./backend/migrations:/directus/migrations
      - ./backend/hooks/user:/directus/extensions/user
    depends_on:
      database:
        condition: service_started
      oidc_proxy:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DB_CLIENT=pg
      - DB_HOST=database
      - DB_PORT=5432
      - DB_DATABASE=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}

      - PUBLIC_URL=${DIRECTUS_PUBLIC_URL}
      - KEY=${DIRECTUS_KEY}
      - SECRET=${DIRECTUS_SECRET}
      - ADMIN_EMAIL=${DIRECTUS_ADMIN_EMAIL}
      - ADMIN_PASSWORD=${DIRECTUS_ADMIN_PASSWORD}

      - AUTH_PROVIDERS=microsoft
      - AUTH_MICROSOFT_DRIVER=openid
      - AUTH_MICROSOFT_MODE=session
      - AUTH_MICROSOFT_CLIENT_ID=${DIRECTUS_AUTH_MICROSOFT_CLIENT_ID}
      - AUTH_MICROSOFT_CLIENT_SECRET=${DIRECTUS_AUTH_MICROSOFT_CLIENT_SECRET}
      - AUTH_MICROSOFT_SCOPE=XboxLive.SignIn XboxLive.offline_access openid email profile offline_access
      - AUTH_MICROSOFT_ISSUER_URL="http://oidc_proxy:8060/consumers/v2.0/.well-known/openid-configuration"
      - AUTH_MICROSOFT_IDENTIFIER_KEY=oid
      - AUTH_MICROSOFT_ALLOW_PUBLIC_REGISTRATION=true
      - AUTH_MICROSOFT_SYNC_USER_INFO=true
      - AUTH_MICROSOFT_ICON=key
      - AUTH_MICROSOFT_REDIRECT_ALLOW_LIST=${DIRECTUS_AUTH_MICROSOFT_REDIRECT_ALLOW_LIST}

      - SESSION_COOKIE_DOMAIN=${DIRECTUS_SESSION_COOKIE_DOMAIN}
      - SESSION_COOKIE_SECURE=true
      - SESSION_COOKIE_SAME_SITE=None

      - WEBSOCKETS_ENABLED=true      

  frontend:
    build:
      context: ./frontend
      target: production
    ports:
      - "3000:3000"
    networks:
      - app_network
    depends_on:
      - backend
    restart: unless-stopped
    env_file:
      - .env

  oidc_proxy:
    build:
      context: ./oidc_proxy
      target: production
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "--timeout=1", "--tries=1", "http://localhost:8060/health"]
      interval: 100ms
      timeout: 100ms
      retries: 10
      start_period: 100ms

networks:
  app_network:
    driver: bridge

volumes:
  database_data:
  backend_uploads:
